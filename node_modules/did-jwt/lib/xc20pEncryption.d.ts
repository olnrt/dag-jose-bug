import { Encrypter, Decrypter } from './JWE';
import type { Resolvable } from 'did-resolver';
export declare type AuthEncryptParams = {
    kid?: string;
    skid?: string;
    apu?: string;
    apv?: string;
};
export declare type AnonEncryptParams = {
    kid?: string;
};
/**
 * Recommended encrypter for authenticated encryption (i.e. sender authentication and requires
 * sender private key to encrypt the data).
 * Uses ECDH-1PU [v3](https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03) and
 * XC20PKW [v2](https://tools.ietf.org/html/draft-amringer-jose-chacha-02).
 *
 * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and
 * are subject to change as new revisions or until the offical CFRG specification are released.
 */
export declare function createAuthEncrypter(recipientPublicKey: Uint8Array, senderSecretKey: Uint8Array, options?: Partial<AuthEncryptParams>): Encrypter;
/**
 * Recommended encrypter for anonymous encryption (i.e. no sender authentication).
 * Uses ECDH-ES+XC20PKW [v2](https://tools.ietf.org/html/draft-amringer-jose-chacha-02).
 *
 * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and
 * is subject to change as new revisions or until the offical CFRG specification is released.
 */
export declare function createAnonEncrypter(publicKey: Uint8Array, options?: Partial<AnonEncryptParams>): Encrypter;
/**
 * Recommended decrypter for authenticated encryption (i.e. sender authentication and requires
 * sender public key to decrypt the data).
 * Uses ECDH-1PU [v3](https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03) and
 * XC20PKW [v2](https://tools.ietf.org/html/draft-amringer-jose-chacha-02).
 *
 * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and
 * are subject to change as new revisions or until the offical CFRG specification are released.
 */
export declare function createAuthDecrypter(recipientSecretKey: Uint8Array, senderPublicKey: Uint8Array): Decrypter;
/**
 * Recommended decrypter for anonymous encryption (i.e. no sender authentication).
 * Uses ECDH-ES+XC20PKW [v2](https://tools.ietf.org/html/draft-amringer-jose-chacha-02).
 *
 * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and
 * is subject to change as new revisions or until the offical CFRG specification is released.
 */
export declare function createAnonDecrypter(secretKey: Uint8Array): Decrypter;
export declare function xc20pDirEncrypter(key: Uint8Array): Encrypter;
export declare function xc20pDirDecrypter(key: Uint8Array): Decrypter;
export declare function x25519Encrypter(publicKey: Uint8Array, kid?: string): Encrypter;
/**
 * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:
 *   - [XC20PKW](https://tools.ietf.org/html/draft-amringer-jose-chacha-02)
 *   - [ECDH-1PU](https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03)
 */
export declare function xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(recipientPublicKey: Uint8Array, senderSecretKey: Uint8Array, options?: Partial<AuthEncryptParams>): Encrypter;
export declare function resolveX25519Encrypters(dids: string[], resolver: Resolvable): Promise<Encrypter[]>;
export declare function x25519Decrypter(secretKey: Uint8Array): Decrypter;
/**
 * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:
 *   - [XC20PKW](https://tools.ietf.org/html/draft-amringer-jose-chacha-02)
 *   - [ECDH-1PU](https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03)
 */
export declare function xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(recipientSecretKey: Uint8Array, senderPublicKey: Uint8Array): Decrypter;
//# sourceMappingURL=xc20pEncryption.d.ts.map